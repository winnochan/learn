// Created by WinnoChan at 2024/04/17 00:26
// leetgo: 1.4.5
// https://leetcode.cn/problems/minimize-malware-spread-ii/

#include <bits/stdc++.h>
#include "LC_IO.h"
#include <vector>
#include <sstream>
#include <iostream>

using namespace std;

// @lc code=begin

class UnionFind {
public:
  UnionFind(n) {
    root_.resize(n);
    for (auto i = 0; i < n; ++i) {
      root_[i] = i;
    }
    size_.resize(n, 1);
  }
  ~UnionFind() {}

  int find(int x) {
    if (root_[x] != x) {
      root_[x] = find(root_[x]);
    }
    return root_[x];
  }

  void merge(int x, int y) {
    auto xi = find(x);
    auto yi = find(y);
    if (xi == yi) return;

    root_[xi] = root_[yi];
    size_[yi] += size_[yi];
  }

  bool same(int x, int y) const {
    return find(x) == find(y);
  }

  int size(int x) const {
    return size_[find(x)];
  }

private:
  vector<int> root_;
  vector<int> size_;
};

class Graph {
  Graph() {}
  ~Graph() {}
}

class Solution {
public:
  int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    //
  }
};

// @lc code=end

int main() {
  ios_base::sync_with_stdio(false);
  stringstream out_stream;

  vector<vector<int>> graph;
  LeetCodeIO::scan(cin, graph);
  vector<int> initial;
  LeetCodeIO::scan(cin, initial);

  Solution *obj = new Solution();
  auto res = obj->minMalwareSpread(graph, initial);
  LeetCodeIO::print(out_stream, res);
  cout << "\noutput: " << out_stream.rdbuf() << endl;

  delete obj;
  return 0;
}
